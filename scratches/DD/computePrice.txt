int computePrice(Ride ride) {

  int price = 0;
  boolean badB=false;

  price += Fares.getStandardFare() * ride.getDriveTime()
           + Fares.getParkedFare() * ride.getBusyTime;

  if(ride.getTimeOutsideBoundary>0){
    badB = true;
    price += Fares.getOutsideCityFare() * ride.getTimeOutsideBoundary;
  }

  switch ride.getEndType()
    case LEGAL : break;
    case LEFT_PARKED : price += Fares.getLeftParkedFee();
                      badB = true;
                      break;
    case END_OUTSIDE_CITY : price += Fares.getLeftOutsideCityFee();
                            badB = true;
                            break;
    default : break;

  price -= price*computeDiscount(ride);
}

float computeDiscount(Ride ride){
  float discount = 0;

  if(ride.getPassengerNumber() >= 2) {
    discount += PriceVariation.getPassengerDiscount();
  }

  if(ride.getEndWithCharge) {
    discount += PriceVariation.getEndWithChargeDiscount();
  } else {
         if(ride.getEndBatteryLevel() > 0.5) {
    	   discount += PriceVariation.getHighBatteryDiscount();
  	 } else {
               Coord endPos = ride.getEndPosition();
		if(ride.getEndBatteryLevel() < 0.2 && GMaps.dist(endPos, getNearestRecharginStation(1, endPos).get(0).getCoord()) > 3)) {
		  discount += PriceVariation.getLowBatteryMalus();
		}
	 }	 	
}

List<Station> getNearestRechargingStation(int nOfStations, Coord position) {
  List<Station> nearest = new ArrayList<>();
  List<float> distances = new ArrayList<>();
  List<Station> stations = Utility.getNonFullRechargingAreas();

  for(Station n : stations) {
     addInOrder(n, GMaps.dist(n.getCoord(), position), nearest, distances, nOfStations);
  }
  return nearest;
}

void addInOrder(Station point, float dist, List<Station> points, List<float> distances, int bound) {
  
  if(points.isEmpty()) {
    points.add(point);
    distances.add(dist);
    return;
  }
  for(float n : distances) {
    if(dist < n.get()){
      distances.add(distances.getIndexOf(n), dist);
      points.add(distances.getIndexOf(n), point);
      distances = distances.subList(0, bound);
      points = points.subList(0 , bound);
      return;
    }
  }
  if(points.lenght() < bound) {
    points.add(point);
    distances.add(dist);
  }
  return;
}
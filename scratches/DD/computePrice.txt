int computePrice(Ride ride) {

  int price = 0;
  boolean badB=false;

  price += Fares.getStandardFare() * ride.getDriveTime()
           + Fares.getParkedFare() * ride.getBusyTime;

  if(ride.getTimeOutsideBoundary>0){
    badB = true;
    price += Fares.getOutsideCityFare() * ride.getTimeOutsideBoundary;
  }

  switch ride.getEndType()
    case LEGAL : break;
    case LEFT_PARKED : price += Fares.getLeftParkedFee();
                      badB = true;
                      break;
    case END_OUTSIDE_CITY : price += Fares.getLeftOutsideCityFee();
                            badB = true;
                            break;
    default : break;

  price -= price*computeDiscount(ride);
}

float computeDiscount(Ride ride){
  float discount = 0;

  if(ride.getPassengerNumber() >= 2) {
    discount += PriceVariation.getPassengerDiscount();
  }

  if(ride.getEndWithCharge) {
    discount += PriceVariation.getEndWithChargeDiscount();
  } else {
         if(ride.getEndBatteryLevel() > 0.5) {
    	   discount += PriceVariation.getHighBatteryDiscount();
  	 } else {
               Coord endPos = ride.getEndPosition();
		if(ride.getEndBatteryLevel() < 0.2 && GMaps.dist(endPos, getNearestRecharginStation(endPos)) > 3)) {
		  discount += PriceVariation.getLowBatteryMalus();
		}
	 }	 	
}

Coord getNearestRechargingStation(Coord position) {
  Coord nearest = new Coord();
  float minDist = -1;
  float dist;
  List<Coord> stations = Utility.getRechargingAreas();

  for(Coord n : stations) {
     dist = Gaps.dist(n, position);
     if(dist < minDist || minDist = -1) {
       minDist = dist;
       nearest = n;
     }
  }
  return nearest;
}
int computePrice(Ride ride) {

  int price = 0;
  boolean badB=false;

  price += Service.getStandardFare() * ride.getTimeRiding()
           + Service.getParkedFare() * ride.getTimeParked;;

  if(ride.getTimeOutsideBoundary>0){
    badB = true;
    price += Service.getOutsideBoundariesFare() * ride.getTimeOutsideBoundary;
  }

  switch ride.getEndType()
    case LEGAL : break;
    case LEFT_PARKED : price += Service.getLeftParkedFee();
                      badB = true;
                      break;
    case END_OUTSIDE_CITY : price += Service.getLeftOutsideCityFee();
                            badB = true;
                            break;
    default : break;

  price -= price*computeDiscount(ride);
}

float computeDiscount(Ride ride){
  float discount = 0;

  if(ride.getPassengerNumber() >= 2) {
    discount += Service.getPassengerDiscount();
  }

  if(ride.getEndWithCharge) {
    discount += Service.getEndWithChargeDiscount();
  } else if(ride.getEndBatteryLevel() > 0.5) {
    discount += Service.getHighBatteryDiscount();
  }
}
